[{"C:\\Users\\Mari\\Desktop\\Tesis\\tesis-frontend\\src\\helpers\\nodes\\nodes.js":"1","C:\\Users\\Mari\\Desktop\\Tesis\\tesis-frontend\\src\\api\\versions\\versions.js":"2","C:\\Users\\Mari\\Desktop\\Tesis\\tesis-frontend\\src\\components\\Content\\Content.js":"3","C:\\Users\\Mari\\Desktop\\Tesis\\tesis-frontend\\src\\screens\\Home\\Home.js":"4","C:\\Users\\Mari\\Desktop\\Tesis\\tesis-frontend\\src\\components\\SelectMessage\\SelectMessage.js":"5","C:\\Users\\Mari\\Desktop\\Tesis\\tesis-frontend\\src\\components\\FileReader\\FileReader.js":"6","C:\\Users\\Mari\\Desktop\\Tesis\\tesis-frontend\\src\\api\\elements\\elements.js":"7","C:\\Users\\Mari\\Desktop\\Tesis\\tesis-frontend\\src\\index.js":"8","C:\\Users\\Mari\\Desktop\\Tesis\\tesis-frontend\\src\\auth\\context\\context.js":"9","C:\\Users\\Mari\\Desktop\\Tesis\\tesis-frontend\\src\\components\\EditMessage\\EditMessage.js":"10"},{"size":7527,"mtime":1620669310552,"results":"11","hashOfConfig":"12"},{"size":2592,"mtime":1618848332364,"results":"13","hashOfConfig":"12"},{"size":5675,"mtime":1620667996845,"results":"14","hashOfConfig":"12"},{"size":3432,"mtime":1619995113891,"results":"15","hashOfConfig":"12"},{"size":648,"mtime":1616356440160,"results":"16","hashOfConfig":"12"},{"size":6981,"mtime":1618848332370,"results":"17","hashOfConfig":"12"},{"size":568,"mtime":1618848332350,"results":"18","hashOfConfig":"12"},{"size":877,"mtime":1619055716866,"results":"19","hashOfConfig":"12"},{"size":101,"mtime":1616070166448,"results":"20","hashOfConfig":"12"},{"size":672,"mtime":1616356440120,"results":"21","hashOfConfig":"12"},{"filePath":"22","messages":"23","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"1ry7ltc",{"filePath":"24","messages":"25","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"26","messages":"27","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"28","messages":"29","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"30","usedDeprecatedRules":"31"},{"filePath":"32","messages":"33","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"34","messages":"35","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36","usedDeprecatedRules":"31"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\Mari\\Desktop\\Tesis\\tesis-frontend\\src\\helpers\\nodes\\nodes.js",["45"],"C:\\Users\\Mari\\Desktop\\Tesis\\tesis-frontend\\src\\api\\versions\\versions.js",[],"C:\\Users\\Mari\\Desktop\\Tesis\\tesis-frontend\\src\\components\\Content\\Content.js",["46","47","48"],"C:\\Users\\Mari\\Desktop\\Tesis\\tesis-frontend\\src\\screens\\Home\\Home.js",["49"],"import React, { useContext, useState, useEffect } from \"react\";\r\nimport \"./Home.css\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport clsx from \"clsx\";\r\n\r\nimport Sidebar from \"../../components/SideBar/Sidebar\";\r\nimport Content from \"../../components/Content/Content\";\r\nimport Table from \"../../components/Table/Table\";\r\n\r\nimport Swal from \"sweetalert2\";\r\n\r\nimport AppContext from \"../../auth/context/context\";\r\nimport { googleAuth } from \"../../firebase/googleAuth\";\r\nimport { postLogin } from \"../../api/login/login\";\r\n\r\n/** Componente que representa la página\r\n *  principal de navegación\r\n */\r\nfunction Home() {\r\n  const classes = useStyles();\r\n  const [drawerItems, setDrawerItems] = useState();\r\n  const [open, setOpen] = useState(true);\r\n  const [load, setLoad] = useState(true);\r\n  const {\r\n    user,\r\n    setUser,\r\n    reloadSidebar,\r\n    selectedProject,\r\n    setSelectedProject,\r\n  } = useContext(AppContext);\r\n\r\n  /**\r\n   * Llamar a google auth para establecer ususario\r\n   */\r\n  const login = async () => {\r\n    let drawer = await googleAuth(setUser);\r\n    setDrawerItems(drawer);\r\n    setLoad(false);\r\n  };\r\n\r\n  /**\r\n   * Mensaje de confirmación para cerrar sesión\r\n   */\r\n  const logout = () => {\r\n    Swal.fire({\r\n      text: \"¿Seguro que deseas cerrar sesión?\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"var(--success)\",\r\n      cancelButtonColor: \"var(--error)\",\r\n      confirmButtonText: \"Si, seguro\",\r\n      cancelButtonText: \"Cancelar\",\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        setSelectedProject();\r\n        setLoad(true);\r\n        localStorage.removeItem(\"user\");\r\n        setUser(null);\r\n        setLoad(false);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Cambiar estado de usuario e iniciar sesion\r\n   */\r\n  async function changeState() {\r\n    login();\r\n  }\r\n\r\n  /**\r\n   * Actualizar arreglo de proyectos\r\n   */\r\n  const getProject = async () => {\r\n    let elements = await postLogin(user, setUser);\r\n    setDrawerItems(elements);\r\n    setLoad(false);\r\n  };\r\n\r\n  /**\r\n   * Llamar a la actualizacion de proyectos\r\n   */\r\n  async function get() {\r\n    getProject();\r\n  }\r\n\r\n  useEffect(() => {\r\n    setLoad(false);\r\n    if (user || reloadSidebar) {\r\n      setLoad(true);\r\n      get();\r\n    }\r\n  }, [user, reloadSidebar]);\r\n\r\n  return (\r\n    <>\r\n      <Sidebar\r\n        items={drawerItems}\r\n        login={changeState}\r\n        logout={logout}\r\n        loader={load}\r\n        open={open}\r\n        setOpen={setOpen}\r\n      />\r\n      <main\r\n        className={clsx(classes.content, {\r\n          [classes.contentShift]: open,\r\n        })}\r\n      >\r\n        {selectedProject ? (\r\n          <div>\r\n            <Content />\r\n            <Table />\r\n          </div>\r\n        ) : null}\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n\r\n/** Creacion de capa de estilos para el componente */\r\nconst useStyles = makeStyles((theme) => ({\r\n  content: {\r\n    flexGrow: 1,\r\n    paddingLeft: theme.spacing(2),\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    marginTop: 70,\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginLeft: 270,\r\n  },\r\n}));\r\n\r\nexport default Home;\r\n",["50","51"],"C:\\Users\\Mari\\Desktop\\Tesis\\tesis-frontend\\src\\components\\SelectMessage\\SelectMessage.js",[],"C:\\Users\\Mari\\Desktop\\Tesis\\tesis-frontend\\src\\components\\FileReader\\FileReader.js",["52","53","54"],"import React, { useContext, useState } from \"react\";\r\nimport \"./FileReader.css\";\r\nimport \"react-dropzone-uploader/dist/styles.css\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { ModalMessage } from \"../../components/ModalMessage/ModalMessage\";\r\nimport { submitArchitecture } from \"../../helpers/architecture/architecture\";\r\nimport { manageElementsSubmit } from \"../../helpers/elements/elements\";\r\n\r\nimport AppContext from \"../../auth/context/context\";\r\nimport Dropzone from \"react-dropzone-uploader\";\r\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Loader from \"../Loader/Loader\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { manageErrors } from \"../../helpers/errors/errors\";\r\n\r\n/**\r\n * Componente que representa pop-up\r\n * para añadir archivos\r\n */\r\nconst FileReader = ({ onClose, open, projectIndex, type }) => {\r\n  const classes = useStyles();\r\n  const [name, setName] = useState(\"\");\r\n  const [valid, setValid] = useState(true);\r\n  const [loader, setLoader] = useState(false);\r\n  const {\r\n    user,\r\n    setReloadSidebar,\r\n    selectedProject,\r\n    setSelectedProject,\r\n  } = useContext(AppContext);\r\n  var messages = {\r\n    error: \"\",\r\n    success: \"\",\r\n  };\r\n\r\n  const handleChangeStatus = ({ meta }, status) => {\r\n    //console.log(status, meta)\r\n  };\r\n\r\n  /**\r\n   * Manejar acción en base al tipo de data a subir a\r\n   * la base de datos\r\n   * @param {Array} allFiles arreglo que contiene todos los archivos XML\r\n   */\r\n  const handleSubmit = async (allFiles) => {\r\n    var response;\r\n    setLoader(true);\r\n    switch (type.toLowerCase()) {\r\n      case \"arquitectura\":\r\n        if (name !== \"\") {\r\n          setLoader(true);\r\n          response = await manageArchitectureSubmit(allFiles);\r\n          manageResponse(response);\r\n          break;\r\n        } else {\r\n          setValid(false);\r\n          break;\r\n        }\r\n      case \"elementos\":\r\n        setLoader(true);\r\n        manageElementsSubmit(\r\n          user,\r\n          allFiles,\r\n          selectedProject,\r\n          setSelectedProject,\r\n          setReloadSidebar\r\n        );\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Manejar los modals a mostrar en base a\r\n   * la respuesta obtenida de la API\r\n   * @param {JSON} response respuesta de la llamada a la API\r\n   */\r\n  const manageResponse = (response) => {\r\n    setReloadSidebar(false);\r\n    if (Number.isInteger(response)) {\r\n      manageErrors(response)\r\n    } else {\r\n      ModalMessage(\"¡Arquitectura creada!\", \" \", \"success\", false, 4000);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Llamada a la API para agregar una nueva arquitectura\r\n   * @param {Array} allFiles arreglo que contiene todos los archivos XML\r\n   * @returns JSON de la respuesta de la API\r\n   */\r\n  const manageArchitectureSubmit = async (allFiles) => {\r\n    const response = await submitArchitecture(\r\n      allFiles,\r\n      user,\r\n      name,\r\n      projectIndex,\r\n      setReloadSidebar\r\n    );\r\n    messages = {\r\n      success: \"Se ha creado una nueva arquitectura\",\r\n      error: \"No se ha podido crear una nueva arquitectura\",\r\n    };\r\n    return response;\r\n  };\r\n\r\n  /**\r\n   * Actualizar el nombre según se actualice el TextField\r\n   * @param {Event} event objeto de tipo evento\r\n   */\r\n  const handleChange = (event) => {\r\n    setValid(true);\r\n    setName(event.target.value);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (loader) {\r\n      setTimeout(setLoader(false), 5000);\r\n      onClose();\r\n    }\r\n  }, [loader]);\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        aria-labelledby=\"simple-modal-title\"\r\n        aria-describedby=\"simple-modal-description\"\r\n        open={open}\r\n        onClose={onClose}\r\n      >\r\n        <div className={classes.paper}>\r\n          {loader ? (\r\n            <Loader />\r\n          ) : (\r\n            <>\r\n              <div>\r\n                <IconButton\r\n                  color=\"inherit\"\r\n                  aria-label=\"open drawer\"\r\n                  onClick={onClose}\r\n                  className={classes.onClose}\r\n                  edge=\"start\"\r\n                >\r\n                  <HighlightOffIcon />\r\n                </IconButton>\r\n                <h2 className={classes.h1}>Agregar {type}</h2>\r\n              </div>\r\n\r\n              {type.toLowerCase() === \"arquitectura\" ? (\r\n                <>\r\n                  <TextField\r\n                    required\r\n                    id=\"outlined-basic\"\r\n                    label=\"Nombre\"\r\n                    value={name}\r\n                    onChange={handleChange}\r\n                    variant=\"outlined\"\r\n                  />\r\n                  {!valid ? (\r\n                    <div className={classes.validacion}>\r\n                      * El nombre de la arquitectura es obligatorio{\" \"}\r\n                    </div>\r\n                  ) : null}\r\n                </>\r\n              ) : null}\r\n              <Dropzone\r\n                onChangeStatus={handleChangeStatus}\r\n                onSubmit={handleSubmit}\r\n                styles={{ dropzone: { maxHeight: 200, maxWidth: 400 } }}\r\n                accept=\"text/xml\"\r\n                inputContent={(files, extra) =>\r\n                  extra.reject\r\n                    ? \"Solo cargar archivos .xml\"\r\n                    : \"Agrega archivos o hacer clic para buscar\"\r\n                }\r\n                styles={{\r\n                  dropzoneReject: {\r\n                    borderColor: \"red\",\r\n                    backgroundColor: \"#DAA\",\r\n                  },\r\n                  inputLabel: (files, extra) =>\r\n                    extra.reject ? { color: \"red\" } : {},\r\n                }}\r\n              />\r\n            </>\r\n          )}\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\n/** Creacion de capa de estilos para el componente */\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: \"absolute\",\r\n    top: \"24%\",\r\n    left: \"23%\",\r\n    width: \"60%\",\r\n    minHeight: 300,\r\n    maxHeight: 600,\r\n    overflow: \"auto\",\r\n    border: \"none\",\r\n    borderRadius: 8,\r\n    background: \"var(--background)\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: \"1.25rem\",\r\n    outline: \"none\",\r\n    animationDuration: \"0.3s\",\r\n    animationTimingFunction: \"ease\",\r\n    animationDelay: \"0s\",\r\n    animationIterationCount: 1,\r\n    animationDirection: \"normal\",\r\n    animationFillMode: \"none\",\r\n    animationPlayState: \"running\",\r\n  },\r\n  h1: {\r\n    color: \"var(--primaryDark)\",\r\n    margin: \"auto\",\r\n    marginBottom: 35,\r\n    fontSize: \"1.875rem\",\r\n    textAlign: \"center\",\r\n    fontFamily: \"var(font-family-content)\",\r\n  },\r\n  validacion: {\r\n    color: \"var(--error)\",\r\n    fontSize: 13,\r\n    margin: 5,\r\n  },\r\n  onClose: {\r\n    position: \"relative\",\r\n    left: \"98%\",\r\n    top: \"-9px\",\r\n    backgroundColor: \"var(primaryDark)\",\r\n    paddingTop: 0,\r\n    paddingRight: 0,\r\n    paddingBottom: 0,\r\n  },\r\n}));\r\n\r\nexport default FileReader;\r\n","C:\\Users\\Mari\\Desktop\\Tesis\\tesis-frontend\\src\\api\\elements\\elements.js",[],"C:\\Users\\Mari\\Desktop\\Tesis\\tesis-frontend\\src\\index.js",[],"C:\\Users\\Mari\\Desktop\\Tesis\\tesis-frontend\\src\\auth\\context\\context.js",[],"C:\\Users\\Mari\\Desktop\\Tesis\\tesis-frontend\\src\\components\\EditMessage\\EditMessage.js",[],{"ruleId":"55","severity":1,"message":"56","line":253,"column":1,"nodeType":"57","endLine":261,"endColumn":3},{"ruleId":"58","severity":1,"message":"59","line":54,"column":11,"nodeType":"60","messageId":"61","endLine":54,"endColumn":16},{"ruleId":"62","severity":1,"message":"63","line":157,"column":6,"nodeType":"64","endLine":157,"endColumn":10,"suggestions":"65"},{"ruleId":"62","severity":1,"message":"66","line":163,"column":6,"nodeType":"64","endLine":163,"endColumn":19,"suggestions":"67"},{"ruleId":"62","severity":1,"message":"68","line":94,"column":6,"nodeType":"64","endLine":94,"endColumn":27,"suggestions":"69"},{"ruleId":"70","replacedBy":"71"},{"ruleId":"72","replacedBy":"73"},{"ruleId":"74","severity":1,"message":"75","line":104,"column":5,"nodeType":"76","messageId":"77","endLine":104,"endColumn":13},{"ruleId":"62","severity":1,"message":"78","line":125,"column":6,"nodeType":"64","endLine":125,"endColumn":14,"suggestions":"79"},{"ruleId":"80","severity":1,"message":"81","line":180,"column":17,"nodeType":"82","endLine":187,"endColumn":19},"import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","no-dupe-keys","Duplicate key 'color'.","ObjectExpression","unexpected","react-hooks/exhaustive-deps","React Hook useEffect has missing dependencies: 'selectNodeHandler', 'setSelectedNodes', 'setSelectionModel', and 'unselectNodeHandler'. Either include them or remove the dependency array.","ArrayExpression",["83"],"React Hook useEffect has a missing dependency: 'setEdgesLabel'. Either include it or remove the dependency array.",["84"],"React Hook useEffect has a missing dependency: 'get'. Either include it or remove the dependency array.",["85"],"no-native-reassign",["86"],"no-negated-in-lhs",["87"],"no-unused-vars","'messages' is assigned a value but never used.","Identifier","unusedVar","React Hook React.useEffect has a missing dependency: 'onClose'. Either include it or remove the dependency array. If 'onClose' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["88"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute",{"desc":"89","fix":"90"},{"desc":"91","fix":"92"},{"desc":"93","fix":"94"},"no-global-assign","no-unsafe-negation",{"desc":"95","fix":"96"},"Update the dependencies array to be: [cy, selectNodeHandler, setSelectedNodes, setSelectionModel, unselectNodeHandler]",{"range":"97","text":"98"},"Update the dependencies array to be: [checked, cy, setEdgesLabel]",{"range":"99","text":"100"},"Update the dependencies array to be: [user, reloadSidebar, get]",{"range":"101","text":"102"},"Update the dependencies array to be: [loader, onClose]",{"range":"103","text":"104"},[4115,4119],"[cy, selectNodeHandler, setSelectedNodes, setSelectionModel, unselectNodeHandler]",[4197,4210],"[checked, cy, setEdgesLabel]",[2301,2322],"[user, reloadSidebar, get]",[3592,3600],"[loader, onClose]"]