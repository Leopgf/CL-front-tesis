[{"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\index.js":"1","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\reportWebVitals.js":"2","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\App.js":"3","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\firebase\\firebase-config.js":"4","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\config\\settings\\settings.js":"5","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\styles\\Global.js":"6","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\auth\\context\\context.js":"7","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\screens\\Home\\Home.js":"8","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\firebase\\googleAuth.js":"9","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\Table\\Table.js":"10","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\SideBar\\Sidebar.js":"11","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\Content\\Content.js":"12","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\api\\login\\login.js":"13","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\Loader\\Loader.js":"14","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\TableItem\\TableItem.js":"15","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\LoginButton\\LoginButton.js":"16","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\SidebarHeader\\SidebarHeader.js":"17","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\Navbar\\Navbar.js":"18","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\SidebarFooter\\SidebarFooter.js":"19","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\SidebarItem\\SidebarItem.js":"20","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\helpers\\nodes\\nodes.js":"21","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\SidebarDetail\\SidebarDetail.js":"22","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\FileReader\\FileReader.js":"23","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\Menu\\Menu.js":"24","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\helpers\\errors\\errors.js":"25","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\helpers\\architecture\\architecture.js":"26","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\helpers\\elements\\elements.js":"27","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\helpers\\projects\\projects.js":"28","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\EditMessage\\EditMessage.js":"29","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\api\\projects\\projects.js":"30","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\DeleteMessage\\DeleteMessage.js":"31","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\ModalMessage\\ModalMessage.js":"32","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\api\\elements\\elements.js":"33","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\SelectMessage\\SelectMessage.js":"34","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\api\\architecture\\architecture.js":"35","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\NavbarItem\\NavbarItem.js":"36","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\Excel\\ExcelDownloader.js":"37","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\helpers\\content\\downloader.js":"38","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\helpers\\versions\\versions.js":"39","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\TableItem\\Edges\\Edges.js":"40","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\TableItem\\Inputs\\Inputs.js":"41","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\TableItem\\Nodes\\Nodes.js":"42","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\api\\login\\versions\\versions.js":"43"},{"size":877,"mtime":1652825345967,"results":"44","hashOfConfig":"45"},{"size":375,"mtime":1652825345969,"results":"46","hashOfConfig":"45"},{"size":1551,"mtime":1652825345893,"results":"47","hashOfConfig":"45"},{"size":445,"mtime":1652825345949,"results":"48","hashOfConfig":"45"},{"size":391,"mtime":1652988799206,"results":"49","hashOfConfig":"45"},{"size":251,"mtime":1652825345977,"results":"50","hashOfConfig":"45"},{"size":101,"mtime":1652825345902,"results":"51","hashOfConfig":"45"},{"size":3432,"mtime":1652825345973,"results":"52","hashOfConfig":"45"},{"size":651,"mtime":1652825345950,"results":"53","hashOfConfig":"45"},{"size":2641,"mtime":1652825345938,"results":"54","hashOfConfig":"45"},{"size":3478,"mtime":1652825345931,"results":"55","hashOfConfig":"45"},{"size":5797,"mtime":1652970041627,"results":"56","hashOfConfig":"45"},{"size":1065,"mtime":1652825345899,"results":"57","hashOfConfig":"45"},{"size":265,"mtime":1652825345916,"results":"58","hashOfConfig":"45"},{"size":3273,"mtime":1652825345945,"results":"59","hashOfConfig":"45"},{"size":1758,"mtime":1652825345919,"results":"60","hashOfConfig":"45"},{"size":2289,"mtime":1652825345935,"results":"61","hashOfConfig":"45"},{"size":8446,"mtime":1652825345924,"results":"62","hashOfConfig":"45"},{"size":1037,"mtime":1652825345934,"results":"63","hashOfConfig":"45"},{"size":2062,"mtime":1652825345937,"results":"64","hashOfConfig":"45"},{"size":8041,"mtime":1652825345960,"results":"65","hashOfConfig":"45"},{"size":3835,"mtime":1652825345932,"results":"66","hashOfConfig":"45"},{"size":6625,"mtime":1652825345914,"results":"67","hashOfConfig":"45"},{"size":3428,"mtime":1652825345920,"results":"68","hashOfConfig":"45"},{"size":1200,"mtime":1652825345958,"results":"69","hashOfConfig":"45"},{"size":4505,"mtime":1652825345952,"results":"70","hashOfConfig":"45"},{"size":3142,"mtime":1652825345956,"results":"71","hashOfConfig":"45"},{"size":3551,"mtime":1652825345962,"results":"72","hashOfConfig":"45"},{"size":672,"mtime":1652825345909,"results":"73","hashOfConfig":"45"},{"size":2302,"mtime":1652825345900,"results":"74","hashOfConfig":"45"},{"size":729,"mtime":1652825345907,"results":"75","hashOfConfig":"45"},{"size":354,"mtime":1652825345922,"results":"76","hashOfConfig":"45"},{"size":568,"mtime":1652825345897,"results":"77","hashOfConfig":"45"},{"size":648,"mtime":1652825345928,"results":"78","hashOfConfig":"45"},{"size":2265,"mtime":1652825345896,"results":"79","hashOfConfig":"45"},{"size":1078,"mtime":1652825345927,"results":"80","hashOfConfig":"45"},{"size":2200,"mtime":1652825345911,"results":"81","hashOfConfig":"45"},{"size":543,"mtime":1652825345954,"results":"82","hashOfConfig":"45"},{"size":4947,"mtime":1652972279445,"results":"83","hashOfConfig":"45"},{"size":1698,"mtime":1652825345939,"results":"84","hashOfConfig":"45"},{"size":5458,"mtime":1652825345941,"results":"85","hashOfConfig":"45"},{"size":1857,"mtime":1652825345944,"results":"86","hashOfConfig":"45"},{"size":2592,"mtime":1652825345901,"results":"87","hashOfConfig":"45"},{"filePath":"88","messages":"89","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},"1pxaff4",{"filePath":"91","messages":"92","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"93","messages":"94","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"95","messages":"96","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"97","messages":"98","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"99","messages":"100","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"101","messages":"102","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"103","messages":"104","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"105","usedDeprecatedRules":"90"},{"filePath":"106","messages":"107","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"108","messages":"109","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"110","usedDeprecatedRules":"90"},{"filePath":"111","messages":"112","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"113","messages":"114","errorCount":0,"fatalErrorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"115"},{"filePath":"116","messages":"117","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"118","messages":"119","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"120","messages":"121","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"122","usedDeprecatedRules":"90"},{"filePath":"123","messages":"124","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"125","messages":"126","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"127","messages":"128","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"90"},{"filePath":"130","messages":"131","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"132","messages":"133","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"134","messages":"135","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"136","usedDeprecatedRules":"90"},{"filePath":"137","messages":"138","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"139","messages":"140","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"141","usedDeprecatedRules":"90"},{"filePath":"142","messages":"143","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"144","messages":"145","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"146","messages":"147","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"148","messages":"149","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"150","messages":"151","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"152","messages":"153","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"154","messages":"155","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"156","messages":"157","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"158","messages":"159","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"160","messages":"161","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"162","messages":"163","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"164","messages":"165","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"166","messages":"167","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"168","messages":"169","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"170","messages":"171","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"172","messages":"173","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"174","messages":"175","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"176","messages":"177","errorCount":0,"fatalErrorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"90"},{"filePath":"179","messages":"180","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"90"},{"filePath":"181","messages":"182","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\index.js",[],["183","184"],"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\reportWebVitals.js",[],"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\App.js",[],"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\firebase\\firebase-config.js",[],"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\config\\settings\\settings.js",[],"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\styles\\Global.js",[],"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\auth\\context\\context.js",[],"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\screens\\Home\\Home.js",["185"],"import React, { useContext, useState, useEffect } from \"react\";\r\nimport \"./Home.css\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\n\r\nimport clsx from \"clsx\";\r\n\r\nimport Sidebar from \"../../components/SideBar/Sidebar\";\r\nimport Content from \"../../components/Content/Content\";\r\nimport Table from \"../../components/Table/Table\";\r\n\r\nimport Swal from \"sweetalert2\";\r\n\r\nimport AppContext from \"../../auth/context/context\";\r\nimport { googleAuth } from \"../../firebase/googleAuth\";\r\nimport { postLogin } from \"../../api/login/login\";\r\n\r\n/** Componente que representa la página\r\n *  principal de navegación\r\n */\r\nfunction Home() {\r\n  const classes = useStyles();\r\n  const [drawerItems, setDrawerItems] = useState();\r\n  const [open, setOpen] = useState(true);\r\n  const [load, setLoad] = useState(true);\r\n  const {\r\n    user,\r\n    setUser,\r\n    reloadSidebar,\r\n    selectedProject,\r\n    setSelectedProject,\r\n  } = useContext(AppContext);\r\n\r\n  /**\r\n   * Llamar a google auth para establecer ususario\r\n   */\r\n  const login = async () => {\r\n    let drawer = await googleAuth(setUser);\r\n    setDrawerItems(drawer);\r\n    setLoad(false);\r\n  };\r\n\r\n  /**\r\n   * Mensaje de confirmación para cerrar sesión\r\n   */\r\n  const logout = () => {\r\n    Swal.fire({\r\n      text: \"¿Seguro que deseas cerrar sesión?\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"var(--success)\",\r\n      cancelButtonColor: \"var(--error)\",\r\n      confirmButtonText: \"Si, seguro\",\r\n      cancelButtonText: \"Cancelar\",\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        setSelectedProject();\r\n        setLoad(true);\r\n        localStorage.removeItem(\"user\");\r\n        setUser(null);\r\n        setLoad(false);\r\n      }\r\n    });\r\n  };\r\n\r\n  /**\r\n   * Cambiar estado de usuario e iniciar sesion\r\n   */\r\n  async function changeState() {\r\n    login();\r\n  }\r\n\r\n  /**\r\n   * Actualizar arreglo de proyectos\r\n   */\r\n  const getProject = async () => {\r\n    let elements = await postLogin(user, setUser);\r\n    setDrawerItems(elements);\r\n    setLoad(false);\r\n  };\r\n\r\n  /**\r\n   * Llamar a la actualizacion de proyectos\r\n   */\r\n  async function get() {\r\n    getProject();\r\n  }\r\n\r\n  useEffect(() => {\r\n    setLoad(false);\r\n    if (user || reloadSidebar) {\r\n      setLoad(true);\r\n      get();\r\n    }\r\n  }, [user, reloadSidebar]);\r\n\r\n  return (\r\n    <>\r\n      <Sidebar\r\n        items={drawerItems}\r\n        login={changeState}\r\n        logout={logout}\r\n        loader={load}\r\n        open={open}\r\n        setOpen={setOpen}\r\n      />\r\n      <main\r\n        className={clsx(classes.content, {\r\n          [classes.contentShift]: open,\r\n        })}\r\n      >\r\n        {selectedProject ? (\r\n          <div>\r\n            <Content />\r\n            <Table />\r\n          </div>\r\n        ) : null}\r\n      </main>\r\n    </>\r\n  );\r\n}\r\n\r\n/** Creacion de capa de estilos para el componente */\r\nconst useStyles = makeStyles((theme) => ({\r\n  content: {\r\n    flexGrow: 1,\r\n    paddingLeft: theme.spacing(2),\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n    marginTop: 70,\r\n  },\r\n  contentShift: {\r\n    transition: theme.transitions.create(\"margin\", {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n    marginLeft: 270,\r\n  },\r\n}));\r\n\r\nexport default Home;\r\n","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\firebase\\googleAuth.js",[],"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\Table\\Table.js",["186"],"import React, { useState, } from \"react\";\r\nimport clsx from \"clsx\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport Drawer from \"@material-ui/core/Drawer\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport KeyboardArrowDownIcon from \"@material-ui/icons/KeyboardArrowDown\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\n\r\nimport TableItem from \"../TableItem/TableItem\";\r\n\r\n/**\r\n * Componente que representa \r\n * al contenedor de tabs con tablas\r\n * del proyecto selecionado\r\n */\r\nconst Table = () => {\r\n  const classes = useStyles();\r\n  const [open, setOpen] = useState(false);\r\n\r\n  /**\r\n   * Cambiar estado del drawer\r\n   */\r\n  const handleDrawer = () => {\r\n    setOpen(!open);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <IconButton\r\n        color=\"inherit\"\r\n        aria-label=\"open drawer\"\r\n        onClick={handleDrawer}\r\n        edge=\"start\"\r\n        className={clsx(classes.menuButton, open && classes.hide)}\r\n      >\r\n        <MenuIcon />\r\n      </IconButton>\r\n\r\n      <Drawer\r\n        className={classes.drawer}\r\n        variant=\"persistent\"\r\n        anchor=\"bottom\"\r\n        open={open}\r\n        classes={{\r\n          paper: classes.drawerPaper,\r\n        }}\r\n      >\r\n        <div className={classes.drawerHeader}>\r\n          <IconButton onClick={handleDrawer}>\r\n            <KeyboardArrowDownIcon />\r\n          </IconButton>\r\n        </div>\r\n        <Divider />\r\n        <TableItem />\r\n      </Drawer>\r\n    </div>\r\n  )\r\n};\r\n\r\n/** Creacion de capa de estilos para el componente */\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n    position: \"absolute\",\r\n    bottom: 0,\r\n    right: 0,\r\n    marginRight: 25,\r\n    backgroundColor: \"var(--primaryDark)\",\r\n    borderEndEndRadius: 0,\r\n    borderEndStartRadius: 0,\r\n    transition: \"0.5s\",\r\n    boxShadow:\r\n      \"0px 2px 4px -1px rgb(0 0 0 / 20%), 0px 4px 5px 0px rgb(0 0 0 / 14%), 0px 1px 10px 0px rgb(0 0 0 / 12%)\",\r\n    color: \"white\",\r\n    \"&:hover\": {\r\n      color: \"var(--primaryDark)\",\r\n    },\r\n  },\r\n  hide: {\r\n    transition: \"1s\",\r\n    display: \"none\",\r\n  },\r\n  drawer: {\r\n    width: '50%',\r\n    flexShrink: 0,\r\n  },\r\n  drawerPaper: {\r\n    boxShadow:\r\n      \"0px 2px 4px -1px rgb(0 0 0 / 20%), 0px 4px 5px 0px rgb(0 0 0 / 14%), 0px 1px 10px 0px rgb(0 0 0 / 12%)\",\r\n\r\n    width: '60%',\r\n  },\r\n  drawerHeader: {\r\n    height: 40,\r\n    display: \"flex\",\r\n    alignItems: \"center\",\r\n    padding: theme.spacing(0, 1),\r\n    justifyContent: \"flex-end\",\r\n  },\r\n}));\r\n\r\nexport default Table;\r\n","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\SideBar\\Sidebar.js",[],"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\Content\\Content.js",["187","188","189"],"import React, { useContext, useState, useEffect } from \"react\";\r\nimport \"./Content.css\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport FormControlLabel from \"@material-ui/core/FormControlLabel\";\r\nimport Switch from \"@material-ui/core/Switch\";\r\n\r\nimport AppContext from \"../../auth/context/context\";\r\nimport CytoscapeComponent from \"react-cytoscapejs\";\r\nimport Loader from \"../Loader/Loader\";\r\nimport nodesHelper from \"../../helpers/nodes/nodes\";\r\n\r\n/**\r\n * Componente que representa el contenido\r\n * de la arquitectura seleccionada\r\n */\r\nconst Content = () => {\r\n  const classes = useStyles();\r\n  const [checked, setChecked] = useState(false);\r\n  const [elementos, setElementos] = useState();\r\n  const [load, setLoad] = useState(false);\r\n  const {\r\n    selectedProject, setSelectedProject,\r\n    cy, setCy,\r\n    selectedNodes, setSelectedNodes,\r\n    setSelectionModel,\r\n  } = useContext(AppContext);\r\n\r\n  /**\r\n   * Obtener el tipo de relación\r\n   * @param {JSON} ele Objeto de cytoscape\r\n   * @returns String tipo de label\r\n   */\r\n  const getEdgeLabel = (ele) => {\r\n    if(!checked) return \"\";\r\n    switch (ele.scratch(\"relation\")) {\r\n      case \"implements\":\r\n        return \"Implementa\";\r\n      case \"extends\":\r\n        return \"Extiende\";\r\n      case \"use\":\r\n        return \"Usa\";\r\n      default:\r\n        return \"\";\r\n    }\r\n  }\r\n\r\n  /** Creacion de capa de estilos para el grafo segun Cytoscape */\r\n  var state = {\r\n    layout: {\r\n      name: \"circle\",\r\n      fit: true,\r\n      padding: 30,\r\n      avoidOverlap: true,\r\n      nodeDimensionsIncludeLabels: true,\r\n      avoidOverlapPadding: 150,\r\n    },\r\n    stylesheet: [\r\n      {\r\n        selector: \"node\",\r\n        style: {\r\n          content: \"data(id)\",\r\n          \"font-size\": 20,\r\n          shape: \"round-rectangle\",\r\n          \"text-wrap\": \"wrap\",\r\n          \"text-max-width\": 80,\r\n          \"text-valign\": \"center\",\r\n          \"text-outline-color\": \"#18202C\",\r\n          width: 270,\r\n          color: \"white\",\r\n          height: 40,\r\n          \"background-color\": \"#18202C\",\r\n        },\r\n      },\r\n      {\r\n        selector: \"edge\",\r\n        style: {\r\n          content: getEdgeLabel,\r\n          width: 4,\r\n          \"font-size\": 20,\r\n          \"curve-style\": \"bezier\",\r\n          \"edge-text-rotation\": \"autorotate\",\r\n          \"target-arrow-shape\": \"triangle-tee\",\r\n          \"text-valign\": \"top\",\r\n          \"text-halign\": \"center\",\r\n          color: \"#fff\",\r\n          \"text-outline-color\": \"#18202C\",\r\n          \"text-outline-width\": 3,\r\n          \"line-color\": \"#18202C\",\r\n          \"target-arrow-color\": \"#18202C\",\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  /**\r\n   * Mostrar u ocultar el nombre de las\r\n   * relaciones entre los nodos\r\n   */\r\n  const setEdgesLabel = () => {\r\n    if (!checked) {\r\n      cy.style().selector(\"edge\").style({\r\n        content: \"\",\r\n      });\r\n    } else {\r\n      cy.style()\r\n        .selector(\"edge\")\r\n        .style({\r\n          content: getEdgeLabel\r\n        });\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Manejador de evento al seleccionar nodo\r\n   * @param {Event} event referencia al elemento\r\n   */\r\n  const selectNodeHandler = (evt) => {\r\n    const nodeId = evt[\"target\"][\"_private\"][\"data\"].id;\r\n    nodesHelper.addNode(\r\n      nodeId,\r\n      selectedNodes,\r\n      setSelectedNodes,\r\n      cy,\r\n      setSelectionModel\r\n    );\r\n    // cy.animate(\r\n    //   {\r\n    //     fit: {\r\n    //       eles: cy.getElementById(nodeId),\r\n    //       padding: 30,\r\n    //     },\r\n    //   },\r\n    //   {\r\n    //     duration: 100,\r\n    //   }\r\n    // );\r\n    evt.preventDefault();\r\n  };\r\n\r\n  /**\r\n   * Manejador de evento al dejar de seleccionar nodo\r\n   * @param {Event} event referencia al elemento\r\n   */\r\n  const unselectNodeHandler = (evt) => {\r\n    const nodeId = evt[\"target\"][\"_private\"][\"data\"].id;\r\n    // cy.fit();\r\n    nodesHelper.removeNode(\r\n      nodeId,\r\n      selectedNodes,\r\n      setSelectedNodes,\r\n      cy,\r\n      setSelectionModel\r\n    );\r\n    nodesHelper.repaintEdges(selectedNodes, cy);\r\n  };\r\n\r\n  useEffect(() => {\r\n    if (cy) {\r\n      cy.on(\"select\", \"node\", selectNodeHandler);\r\n      cy.on(\"unselect\", \"node\", unselectNodeHandler);\r\n      setSelectionModel([]);\r\n      setSelectedNodes(new Set());\r\n    }\r\n  }, [cy]);\r\n\r\n  useEffect(() => {\r\n    if (cy) {\r\n      setEdgesLabel();\r\n    }\r\n  }, [checked, cy]);\r\n\r\n  useEffect(() => {\r\n    setLoad(true);\r\n    setElementos(selectedProject.elements);\r\n    //console.log(selectedProject.elements);\r\n  }, [selectedProject]);\r\n\r\n  useEffect(() => {\r\n    if (load) {\r\n      setLoad(false);\r\n      setChecked(false);\r\n    }\r\n  }, [elementos, load]);\r\n\r\n  return (\r\n    <>\r\n      {load ? (\r\n        <Loader />\r\n      ) : elementos ? (\r\n        <div>\r\n          <div className={classes.onClose}>\r\n            <FormControlLabel\r\n              control={\r\n                <Switch\r\n                  checked={checked}\r\n                  onChange={() => setChecked((prev) => !prev)}\r\n                />\r\n              }\r\n              labelPlacement=\"start\"\r\n              style={{ marginRight: 5 }}\r\n            />\r\n          </div>\r\n\r\n          <CytoscapeComponent\r\n            className=\"component\"\r\n            cy={(cyt) => {\r\n              setCy(cyt);\r\n            }}\r\n            elements={CytoscapeComponent.normalizeElements(elementos)}\r\n            id=\"component\"\r\n            layout={state.layout}\r\n            maxZoom={2}\r\n            pan={{ x: 150, y: 30 }}\r\n            stylesheet={state.stylesheet}\r\n            zoom={0.5}\r\n          />\r\n        </div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\n/** Creacion de capa de estilos para el componente */\r\nconst useStyles = makeStyles((theme) => ({\r\n  onClose: {\r\n    position: \"absolute\",\r\n    right: \"18px\",\r\n    top: \"75px\",\r\n    zIndex: 3,\r\n  },\r\n}));\r\n\r\nexport default Content;\r\n","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\api\\login\\login.js",[],"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\Loader\\Loader.js",[],"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\TableItem\\TableItem.js",["190"],"import React, { useState } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport SwipeableViews from \"react-swipeable-views\";\r\n\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\n\r\nimport EdgesTable from \"./Edges/Edges\";\r\nimport NodesTable from \"./Nodes/Nodes\";\r\nimport { TextField } from \"@material-ui/core\";\r\nimport Inputs from \"./Inputs/Inputs\";\r\n\r\n/**\r\n * Componente que representa al contenedor\r\n * de cada panel en las tabs\r\n */\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`full-width-tabpanel-${index}`}\r\n      aria-labelledby={`full-width-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && <Box p={2}>{children}</Box>}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\n/**\r\n * Manejador de props para cada tab\r\n * @param {int} index tab actual seleccionada\r\n */\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `full-width-tab-${index}`,\r\n    \"aria-controls\": `full-width-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\n/**\r\n * Componente que representa\r\n * al contenedor de las tablas\r\n * para manejo de nodos y aristas\r\n */\r\nconst TableItem = () => {\r\n  const classes = useStyles();\r\n  const theme = useTheme();\r\n  const [value, setValue] = useState(0);\r\n\r\n  /**\r\n   * Manejador de eventos sobre\r\n   * cambios en tabs\r\n   * @param {Event} event \r\n   * @param {int} newValue nuevo indice\r\n   */\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n\r\n  /**\r\n   * Manejador de eventos sobre\r\n   * cambios en el indice de las tabs\r\n   * @param {int} index nuevo indice\r\n   */\r\n  const handleChangeIndex = (index) => {\r\n    setValue(index);\r\n  };\r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Inputs />\r\n      <AppBar position=\"static\" color=\"default\">\r\n        <Tabs\r\n          value={value}\r\n          onChange={handleChange}\r\n          indicatorColor=\"primary\"\r\n          textColor=\"primary\"\r\n          variant=\"fullWidth\"\r\n          aria-label=\"full width tabs example\"\r\n        >\r\n          <Tab label=\"Nodos\" {...a11yProps(0)} />\r\n          <Tab label=\"Relaciones\" {...a11yProps(1)} />\r\n        </Tabs>\r\n      </AppBar>\r\n      <SwipeableViews\r\n        axis={theme.direction === \"rtl\" ? \"x-reverse\" : \"x\"}\r\n        index={value}\r\n        onChangeIndex={handleChangeIndex}\r\n      >\r\n        <TabPanel value={value} index={0} dir={theme.direction}>\r\n          <NodesTable />\r\n        </TabPanel>\r\n        <TabPanel value={value} index={1} dir={theme.direction}>\r\n          <EdgesTable />\r\n        </TabPanel>\r\n      </SwipeableViews>\r\n    </div>\r\n  );\r\n};\r\n\r\n/** Creacion de capa de estilos para el componente */\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    backgroundColor: theme.palette.background.paper,\r\n    width: \"auto\",\r\n  },\r\n  inputs: {\r\n    padding: theme.spacing(2),\r\n  },\r\n  inputAlign: {\r\n    marginRight: theme.spacing(1.5),\r\n  }\r\n}));\r\n\r\nexport default TableItem;\r\n","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\LoginButton\\LoginButton.js",[],"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\SidebarHeader\\SidebarHeader.js",[],"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\Navbar\\Navbar.js",["191"],"import React, { useContext, useState } from \"react\";\r\nimport clsx from \"clsx\";\r\n\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\nimport {\r\n  manageCreateVersion,\r\n  manageDeleteVersion,\r\n  manageEditVersion,\r\n} from \"../../helpers/versions/versions\";\r\nimport { downloadGraph } from \"../../helpers/content/downloader\";\r\n\r\nimport Swal from \"sweetalert2\";\r\n\r\nimport AddIcon from \"@material-ui/icons/AddOutlined\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport AppContext from \"../../auth/context/context\";\r\nimport DeleteIcon from \"@material-ui/icons/DeleteOutlineOutlined\";\r\nimport CreateIcon from \"@material-ui/icons/CreateNewFolderOutlined\";\r\nimport EditIcon from \"@material-ui/icons/EditOutlined\";\r\nimport Excel from \"../Excel/ExcelDownloader\";\r\nimport GetAppIcon from \"@material-ui/icons/GetApp\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\r\nimport MenuIcon from \"@material-ui/icons/Menu\";\r\nimport Menu from \"@material-ui/core/Menu\";\r\nimport MenuItem from \"@material-ui/core/MenuItem\";\r\nimport Modal from \"../FileReader/FileReader\";\r\nimport nodeHelper from \"../../helpers/nodes/nodes\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport NavbarItem from \"../NavbarItem/NavbarItem\";\r\n\r\n/**\r\n * Componente que representa la barra\r\n * superior de navegacion\r\n */\r\nconst Navbar = ({ open, setOpen }) => {\r\n  const classes = useStyles();\r\n  const { user, selectedProject, setSelectedProject, setReloadSidebar, cy } =\r\n    useContext(AppContext);\r\n  const [showModal, setShowModal] = useState(false);\r\n  const [anchorEl, setAnchorEl] = useState(null);\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  /**\r\n   * Cerrar proyecto seleccionado\r\n   */\r\n  const onClose = () => {\r\n    Swal.fire({\r\n      text: \"¿Seguro que deseas cerrar \" + selectedProject.versionName + \"?\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"var(--success)\",\r\n      cancelButtonColor: \"var(--error)\",\r\n      confirmButtonText: \"Si, seguro\",\r\n      cancelButtonText: \"Cancelar\",\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        setSelectedProject();\r\n      }\r\n    });\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <AppBar\r\n        position=\"fixed\"\r\n        className={clsx(classes.appBar, {\r\n          [classes.appBarShift]: open,\r\n        })}\r\n      >\r\n        <Toolbar>\r\n          <IconButton\r\n            aria-label=\"open drawer\"\r\n            onClick={() => setOpen(true)}\r\n            edge=\"start\"\r\n            className={clsx(classes.menuButton, open && classes.hide)}\r\n          >\r\n            <MenuIcon />\r\n          </IconButton>\r\n          {selectedProject ? (\r\n            <div\r\n              style={{\r\n                display: \"flex\",\r\n                width: \"100%\",\r\n                justifyContent: \"space-between\",\r\n              }}\r\n            >\r\n              <div className={classes.title}>\r\n                <h1\r\n                  className={classes.h1}\r\n                  style={{ marginLeft: 0, minWidth: 145 }}\r\n                >\r\n                  {selectedProject.versionName}\r\n                </h1>\r\n                <IconButton\r\n                  aria-label=\"open edit\"\r\n                  className={classes.icon}\r\n                  onClick={() =>\r\n                    manageEditVersion(\r\n                      user,\r\n                      selectedProject,\r\n                      setSelectedProject,\r\n                      setReloadSidebar\r\n                    )\r\n                  }\r\n                >\r\n                  <EditIcon />\r\n                </IconButton>\r\n                {selectedProject.versions > 1 ? (\r\n                  <IconButton\r\n                    aria-label=\"open delete\"\r\n                    className={classes.icon}\r\n                    onClick={() =>\r\n                      manageDeleteVersion(\r\n                        user,\r\n                        selectedProject,\r\n                        setSelectedProject,\r\n                        setReloadSidebar\r\n                      )\r\n                    }\r\n                  >\r\n                    <DeleteIcon />\r\n                  </IconButton>\r\n                ) : null}\r\n              </div>\r\n              <div style={{ textAlign: \"right\" }}>\r\n                <NavbarItem\r\n                  icon={<GetAppIcon />}\r\n                  title={\"Descargar\"}\r\n                  aria_controls={\"simple-menu\"}\r\n                  aria_haspopup={\"true\"}\r\n                  onClick={handleClick}\r\n                />\r\n                <Menu\r\n                  id=\"simple-menu\"\r\n                  anchorEl={anchorEl}\r\n                  keepMounted\r\n                  open={Boolean(anchorEl)}\r\n                  onClose={handleClose}\r\n                  PaperProps={{\r\n                    style: {\r\n                      padding: 10,\r\n                    },\r\n                  }}\r\n                >\r\n                  <Excel\r\n                    fileName={selectedProject.versionName}\r\n                    nodesData={nodeHelper.getNodeData(selectedProject)}\r\n                    relationsData={nodeHelper.getRelationData(selectedProject)}\r\n                  />\r\n                  <MenuItem\r\n                    onClick={() =>\r\n                      downloadGraph(\"jpg\", cy, selectedProject.versionName)\r\n                    }\r\n                  >\r\n                    Descargar JPG\r\n                  </MenuItem>\r\n                  <MenuItem\r\n                    onClick={() =>\r\n                      downloadGraph(\"png\", cy, selectedProject.versionName)\r\n                    }\r\n                  >\r\n                    Descargar PNG\r\n                  </MenuItem>\r\n                </Menu>\r\n                <NavbarItem\r\n                  icon={<CreateIcon />}\r\n                  title={\"Crear nueva versión\"}\r\n                  aria_controls={\"simple-menu\"}\r\n                  aria_haspopup={\"false\"}\r\n                  onClick={() =>\r\n                    manageCreateVersion(user, selectedProject, setReloadSidebar)\r\n                  }\r\n                />\r\n                <NavbarItem\r\n                  icon={<AddIcon />}\r\n                  aria_controls={\"simple-menu\"}\r\n                  aria_haspopup={\"false\"}\r\n                  title={\"Agregar elementos\"}\r\n                  onClick={() => setShowModal(true)}\r\n                />\r\n\r\n                <IconButton\r\n                  color=\"inherit\"\r\n                  aria-label=\"open drawer\"\r\n                  onClick={onClose}\r\n                  edge=\"start\"\r\n                >\r\n                  <HighlightOffIcon />\r\n                </IconButton>\r\n              </div>\r\n            </div>\r\n          ) : null}\r\n        </Toolbar>\r\n      </AppBar>\r\n      {showModal ? (\r\n        <Modal\r\n          open={showModal}\r\n          onClose={() => setShowModal(false)}\r\n          projectIndex={selectedProject.projectIndex}\r\n          type={\"Elementos\"}\r\n        />\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\n/** Creacion de capa de estilos para el componente */\r\nconst drawerWidth = 280;\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: \"flex\",\r\n  },\r\n\r\n  appBar: {\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.sharp,\r\n      duration: theme.transitions.duration.leavingScreen,\r\n    }),\r\n  },\r\n\r\n  appBarShift: {\r\n    width: `calc(100% - ${drawerWidth}px)`,\r\n    marginLeft: drawerWidth,\r\n    transition: theme.transitions.create([\"margin\", \"width\"], {\r\n      easing: theme.transitions.easing.easeOut,\r\n      duration: theme.transitions.duration.enteringScreen,\r\n    }),\r\n  },\r\n\r\n  menuButton: {\r\n    marginRight: theme.spacing(2),\r\n    color: \"var(--background)\",\r\n  },\r\n\r\n  hide: {\r\n    display: \"none\",\r\n  },\r\n\r\n  drawer: {\r\n    width: drawerWidth,\r\n    minWidth: 200,\r\n    flexShrink: 0,\r\n    backgroundColor: \"var(--primaryDark)\",\r\n  },\r\n\r\n  title: {\r\n    display: \"flex\",\r\n    flexDirection: \"row\",\r\n    flexWrap: \"nowrap\",\r\n    justifyContent: \"flex-start\",\r\n    alignItems: \"center\",\r\n  },\r\n\r\n  h1: {\r\n    color: \"var(--background)\",\r\n    margin: \"auto\",\r\n    fontFamily: \"var(font-family-content)\",\r\n    display: \"inline\",\r\n    paddingRight: 16,\r\n    fontSize: 24,\r\n  },\r\n\r\n  icon: {\r\n    color: \"var(--background)\",\r\n    paddingRight: 0,\r\n    paddingLeft: 5,\r\n  },\r\n}));\r\n\r\nexport default Navbar;\r\n","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\SidebarFooter\\SidebarFooter.js",[],"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\SidebarItem\\SidebarItem.js",[],"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\helpers\\nodes\\nodes.js",["192"],"/**\r\n * Agregar un nodo al set\r\n * @param {String} id ID del nodo\r\n * @param {Set} selectedNodes Nodos globalmente seleccionados\r\n * @param {Function} setSelectedNodes Función para setear los nodos seleccionados\r\n * @param {Ref} cy Referencia a objeto cytoscape\r\n * @param {Function} setSelectionModel Función para setear el selection model\r\n */\r\nconst addNode = (\r\n  id,\r\n  selectedNodes,\r\n  setSelectedNodes,\r\n  cy,\r\n  setSelectionModel\r\n) => {\r\n  const temp = selectedNodes;\r\n  temp.add(id);\r\n  setSelectedNodes(temp);\r\n  setSelectionModel([...temp]);\r\n  changeNodeColor(cy, id, \"add\");\r\n  const edges = getEdges(cy, id);\r\n  changeEdgesColor(cy, edges, \"add\");\r\n};\r\n\r\n/**\r\n * Eliminar un nodo del set\r\n * @param {String} id ID del nodo\r\n * @param {Set} selectedNodes Nodos globalmente seleccionados\r\n * @param {Function} setSelectedNodes Función para setear los nodos seleccionados\r\n * @param {Ref} cy Referencia a objeto cytoscape\r\n * @param {Function} setSelectionModel Función para setear el selection model\r\n */\r\nconst removeNode = (\r\n  id,\r\n  selectedNodes,\r\n  setSelectedNodes,\r\n  cy,\r\n  setSelectionModel\r\n) => {\r\n  const temp = selectedNodes;\r\n  temp.delete(id);\r\n  setSelectedNodes(temp);\r\n  setSelectionModel([...temp]);\r\n  changeNodeColor(cy, id, \"remove\");\r\n  const edges = getEdges(cy, id);\r\n  changeEdgesColor(cy, edges, \"remove\");\r\n};\r\n\r\n/**\r\n * Manejar acción al hacer click en una\r\n * celda de la tabla\r\n * @param {String} nodeId\r\n * @param {Set} selectedNodes Nodos globalmente seleccionados\r\n * @param {Function} setSelectedNodes Función para setear los nodos seleccionados\r\n * @param {Ref} cy Referencia a objeto cytoscape\r\n * @param {Function} setSelectionModel Función para setear el selection model\r\n */\r\nconst manageCellClick = (\r\n  nodeId,\r\n  selectedNodes,\r\n  setSelectedNodes,\r\n  cy,\r\n  setSelectionModel\r\n) => {\r\n  if (selectedNodes.has(nodeId)) {\r\n    removeNode(nodeId, selectedNodes, setSelectedNodes, cy, setSelectionModel);\r\n    cy.getElementById(nodeId)[\"_private\"][\"selected\"] = false;\r\n    repaintEdges(selectedNodes, cy);\r\n  } else {\r\n    addNode(nodeId, selectedNodes, setSelectedNodes, cy, setSelectionModel);\r\n    cy.getElementById(nodeId)[\"_private\"][\"selected\"] = true;\r\n  }\r\n};\r\n\r\n/**\r\n * Cambiar el color del nodo\r\n * @param {Ref} cy Referencia a objeto cytoscape\r\n * @param {String} nodeId ID del nodo\r\n * @param {String} type Selección/Deselección del nodo\r\n */\r\nconst changeNodeColor = (cy, nodeId, type) => {\r\n  const backgroundColor = type === \"remove\" ? \"#18202C\" : \"#ffc74d\";\r\n  cy.getElementById(nodeId).animate(\r\n    {\r\n      style: {\r\n        \"background-color\": backgroundColor,\r\n      },\r\n    },\r\n    {\r\n      duration: 0,\r\n    }\r\n  );\r\n};\r\n\r\n/**\r\n * Obtener todas las aristas de\r\n * un nodo\r\n * @param {Ref} cy Referencia a objeto cytoscape\r\n * @param {String} nodeId ID del nodo\r\n * @returns arreglo de objetos con info de aristas\r\n */\r\nconst getEdges = (cy, nodeId) => {\r\n  return cy.getElementById(nodeId).connectedEdges();\r\n};\r\n\r\n/**\r\n * Manejar el cambio de color de todas las aristas\r\n * de un nodo\r\n * @param {Ref} cy Referencia a objeto cytoscape\r\n * @param {Array} edges Arreglo de objetos con info de aristas\r\n * @param {String} type Selección/Deselección del nodo\r\n */\r\nconst changeEdgesColor = (cy, edges, type) => {\r\n  edges.forEach((edge) => {\r\n    const edgeId = edge[\"_private\"][\"data\"].id;\r\n    changeEdgeColor(cy, edgeId, type);\r\n  });\r\n};\r\n\r\n/**\r\n * Cambiar el color de una arista\r\n * @param {Ref} cy Referencia a objeto cytoscape\r\n * @param {String} edgeId ID de la arista\r\n * @param {String} type Selección/Deselección del nodo\r\n */\r\nconst changeEdgeColor = (cy, edgeId, type) => {\r\n  const backgroundColor = type === \"remove\" ? \"#18202C\" : \"#ffc74d\";\r\n  cy.getElementById(edgeId).style({\r\n    \"line-color\": backgroundColor,\r\n    \"target-arrow-color\": backgroundColor,\r\n  });\r\n};\r\n\r\n/**\r\n * Manejar selección de columna de nodos\r\n * @param {Set} selectedNodes Nodos globalmente seleccionados\r\n * @param {Function} setSelectedNodes Función para setear los nodos seleccionados\r\n * @param {Ref} cy Referencia a objeto cytoscape\r\n * @param {Function} setSelectionModel Función para setear el selection model\r\n */\r\nconst manageCheckSelection = (\r\n  selectedNodes,\r\n  setSelectedNodes,\r\n  cy,\r\n  setSelectionModel\r\n) => {\r\n  const nodes = cy.filter(\"nodes\");\r\n  if (selectedNodes.size > 0) {\r\n    removeAllNodes(selectedNodes, setSelectedNodes, cy, setSelectionModel);\r\n  } else {\r\n    addAllNodes(nodes, selectedNodes, setSelectedNodes, cy, setSelectionModel);\r\n  }\r\n};\r\n\r\n/**\r\n * Deseleccionar todos los nodos\r\n * @param {Set} selectedNodes Nodos globalmente seleccionados\r\n * @param {Function} setSelectedNodes Función para setear los nodos seleccionados\r\n * @param {Ref} cy Referencia a objeto cytoscape\r\n * @param {Function} setSelectionModel Función para setear el selection model\r\n */\r\nconst removeAllNodes = (\r\n  selectedNodes,\r\n  setSelectedNodes,\r\n  cy,\r\n  setSelectionModel\r\n) => {\r\n  selectedNodes.forEach((node) => {\r\n    removeNode(node, selectedNodes, setSelectedNodes, cy, setSelectionModel);\r\n    cy.getElementById(node)[\"_private\"][\"selected\"] = false;\r\n  });\r\n};\r\n\r\n/**\r\n * Seleccionar todos los nodos\r\n * @param {Array} nodeArray Arreglo de nodos\r\n * @param {Set} selectedNodes Nodos globalmente seleccionados\r\n * @param {Function} setSelectedNodes Función para setear los nodos seleccionados\r\n * @param {Ref} cy Referencia a objeto cytoscape\r\n * @param {Function} setSelectionModel Función para setear el selection model\r\n */\r\nconst addAllNodes = (\r\n  nodeArray,\r\n  selectedNodes,\r\n  setSelectedNodes,\r\n  cy,\r\n  setSelectionModel\r\n) => {\r\n  nodeArray.forEach((node) => {\r\n    const nodeId = node[\"_private\"][\"data\"].id;\r\n    addNode(nodeId, selectedNodes, setSelectedNodes, cy, setSelectionModel);\r\n    cy.getElementById(nodeId)[\"_private\"][\"selected\"] = true;\r\n  });\r\n};\r\n\r\n/**\r\n * Repintar las aristas\r\n * @param {Set} selectedNodes Nodos globalmente seleccionados\r\n * @param {Ref} cy Referencia a objeto cytoscape\r\n */\r\nconst repaintEdges = (selectedNodes, cy) => {\r\n  selectedNodes.forEach((node) => {\r\n    const edges = getEdges(cy, node);\r\n    changeEdgesColor(cy, edges);\r\n  });\r\n};\r\n\r\n/**\r\n * Conseguir todos los nodos del proyecto\r\n * actualmente abierto\r\n * @param {JSON} selectedProject Objeto con información del proyecto actual\r\n * @returns Arreglo de objetos de tipo nodo\r\n */\r\nconst getNodeData = (selectedProject) => {\r\n  return selectedProject.elements.nodes.map((node, index) => ({\r\n    id: index,\r\n    name: node.data.name,\r\n    module: node.data.module,\r\n    incompleteResources: node.data.incompleteResources,\r\n  }));\r\n};\r\n\r\n/**\r\n * Conseguir todas las relaciones existentes\r\n * del proyecto actualmente abierto\r\n * @param {JSON} selectedProject Objeto con información del proyecto actual\r\n * @returns Arreglo de objetos de tipo aristas\r\n */\r\nconst getRelationData = (selectedProject) => {\r\n  return selectedProject.elements.edges?.map((edge, index) => {\r\n    return {\r\n      id: index,\r\n      source: edge.data.source,\r\n      target: edge.data.target,\r\n      relation: getRelationType(edge.scratch.relation),\r\n      dms: edge.metrics.DMS.value,\r\n      abstractness: edge.metrics.abstractness.value,\r\n      coupling: edge.metrics.coupling.value,\r\n      instability: edge.metrics.instability.value,\r\n      nameResemblance: edge.metrics.nameResemblance.value,\r\n      packageMapping: edge.metrics.packageMapping?.value,\r\n      q: null,\r\n      answer: null,\r\n\r\n    };\r\n  })\r\n};\r\n\r\n/**\r\n * Obtener el nombre de una relación\r\n * @param {String} relation Tipo de relación\r\n * @returns Nombre de la relación\r\n */\r\nconst getRelationType = (relation) => {\r\n  switch (relation) {\r\n    case \"implements\":\r\n      return \"Implementación\";\r\n    case \"extends\":\r\n      return \"Extensión\";\r\n    case \"use\":\r\n      return \"Use\"\r\n    default:\r\n      break;\r\n  }\r\n};\r\n\r\nexport default {\r\n  addNode,\r\n  manageCellClick,\r\n  manageCheckSelection,\r\n  getNodeData,\r\n  getRelationData,\r\n  removeNode,\r\n  repaintEdges,\r\n};\r\n","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\SidebarDetail\\SidebarDetail.js",[],"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\FileReader\\FileReader.js",["193","194"],"import React, { useContext, useState } from \"react\";\r\nimport \"./FileReader.css\";\r\nimport \"react-dropzone-uploader/dist/styles.css\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { ModalMessage } from \"../../components/ModalMessage/ModalMessage\";\r\nimport { submitArchitecture } from \"../../helpers/architecture/architecture\";\r\nimport { manageElementsSubmit } from \"../../helpers/elements/elements\";\r\n\r\nimport AppContext from \"../../auth/context/context\";\r\nimport Dropzone from \"react-dropzone-uploader\";\r\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Loader from \"../Loader/Loader\";\r\nimport Modal from \"@material-ui/core/Modal\";\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { manageErrors } from \"../../helpers/errors/errors\";\r\n\r\n/**\r\n * Componente que representa pop-up\r\n * para añadir archivos\r\n */\r\nconst FileReader = ({ onClose, open, projectIndex, type }) => {\r\n  const classes = useStyles();\r\n  const [name, setName] = useState(\"\");\r\n  const [valid, setValid] = useState(true);\r\n  const [loader, setLoader] = useState(false);\r\n  const {\r\n    user,\r\n    setReloadSidebar,\r\n    selectedProject, setSelectedProject,\r\n  } = useContext(AppContext);\r\n\r\n  /**\r\n   * Manejar acción en base al tipo de data a subir a\r\n   * la base de datos\r\n   * @param {Array} allFiles arreglo que contiene todos los archivos XML\r\n   */\r\n  const handleSubmit = async (allFiles) => {\r\n    var response;\r\n    setLoader(true);\r\n    switch (type.toLowerCase()) {\r\n      case \"arquitectura\":\r\n        if (name !== \"\") {\r\n          setLoader(true);\r\n          response = await manageArchitectureSubmit(allFiles);\r\n          manageResponse(response);\r\n          break;\r\n        } else {\r\n          setValid(false);\r\n          break;\r\n        }\r\n      case \"elementos\":\r\n        setLoader(true);\r\n        manageElementsSubmit(\r\n          user,\r\n          allFiles,\r\n          selectedProject,\r\n          setSelectedProject,\r\n          setReloadSidebar\r\n        );\r\n        break;\r\n      default:\r\n        break;\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Manejar los modals a mostrar en base a\r\n   * la respuesta obtenida de la API\r\n   * @param {JSON} response respuesta de la llamada a la API\r\n   */\r\n  const manageResponse = (response) => {\r\n    setReloadSidebar(false);\r\n    if (Number.isInteger(response)) {\r\n      manageErrors(response)\r\n    } else {\r\n      ModalMessage(\"¡Arquitectura creada!\", \" \", \"success\", false, 4000);\r\n    }\r\n  };\r\n\r\n  /**\r\n   * Llamada a la API para agregar una nueva arquitectura\r\n   * @param {Array} allFiles arreglo que contiene todos los archivos XML\r\n   * @returns JSON de la respuesta de la API\r\n   */\r\n  const manageArchitectureSubmit = async (allFiles) => {\r\n    const response = await submitArchitecture(\r\n      allFiles,\r\n      user,\r\n      name,\r\n      projectIndex,\r\n      setReloadSidebar\r\n    );\r\n    return response;\r\n  };\r\n\r\n  /**\r\n   * Actualizar el nombre según se actualice el TextField\r\n   * @param {Event} event objeto de tipo evento\r\n   */\r\n  const handleChange = (event) => {\r\n    setValid(true);\r\n    setName(event.target.value);\r\n  };\r\n\r\n  React.useEffect(() => {\r\n    if (loader) {\r\n      setTimeout(setLoader(false), 5000);\r\n      onClose();\r\n    }\r\n  }, [loader]);\r\n\r\n  return (\r\n    <div>\r\n      <Modal\r\n        aria-labelledby=\"simple-modal-title\"\r\n        aria-describedby=\"simple-modal-description\"\r\n        open={open}\r\n        onClose={onClose}\r\n      >\r\n        <div className={classes.paper}>\r\n          {loader ? (\r\n            <Loader />\r\n          ) : (\r\n            <>\r\n              <div>\r\n                <IconButton\r\n                  color=\"inherit\"\r\n                  aria-label=\"open drawer\"\r\n                  onClick={onClose}\r\n                  className={classes.onClose}\r\n                  edge=\"start\"\r\n                >\r\n                  <HighlightOffIcon />\r\n                </IconButton>\r\n                <h2 className={classes.h1}>Agregar {type}</h2>\r\n              </div>\r\n\r\n              {type.toLowerCase() === \"arquitectura\" ? (\r\n                <>\r\n                  <TextField\r\n                    required\r\n                    id=\"outlined-basic\"\r\n                    label=\"Nombre\"\r\n                    value={name}\r\n                    onChange={handleChange}\r\n                    variant=\"outlined\"\r\n                  />\r\n                  {!valid ? (\r\n                    <div className={classes.validacion}>\r\n                      * El nombre de la arquitectura es obligatorio{\" \"}\r\n                    </div>\r\n                  ) : null}\r\n                </>\r\n              ) : null}\r\n              <Dropzone\r\n                onSubmit={handleSubmit}\r\n                styles={{ dropzone: { maxHeight: 200, maxWidth: 400 } }}\r\n                accept=\"text/xml\"\r\n                inputContent={(files, extra) =>\r\n                  extra.reject\r\n                    ? \"Solo cargar archivos .xml\"\r\n                    : \"Agrega archivos o hacer clic para buscar\"\r\n                }\r\n                styles={{\r\n                  dropzoneReject: {\r\n                    borderColor: \"red\",\r\n                    backgroundColor: \"#DAA\",\r\n                  },\r\n                  inputLabel: (files, extra) =>\r\n                    extra.reject ? { color: \"red\" } : {},\r\n                }}\r\n              />\r\n            </>\r\n          )}\r\n        </div>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\n/** Creacion de capa de estilos para el componente */\r\nconst useStyles = makeStyles((theme) => ({\r\n  paper: {\r\n    position: \"absolute\",\r\n    top: \"24%\",\r\n    left: \"23%\",\r\n    width: \"60%\",\r\n    minHeight: 300,\r\n    maxHeight: 600,\r\n    overflow: \"auto\",\r\n    border: \"none\",\r\n    borderRadius: 8,\r\n    background: \"var(--background)\",\r\n    boxShadow: theme.shadows[5],\r\n    padding: \"1.25rem\",\r\n    outline: \"none\",\r\n    animationDuration: \"0.3s\",\r\n    animationTimingFunction: \"ease\",\r\n    animationDelay: \"0s\",\r\n    animationIterationCount: 1,\r\n    animationDirection: \"normal\",\r\n    animationFillMode: \"none\",\r\n    animationPlayState: \"running\",\r\n  },\r\n  h1: {\r\n    color: \"var(--primaryDark)\",\r\n    margin: \"auto\",\r\n    marginBottom: 35,\r\n    fontSize: \"1.875rem\",\r\n    textAlign: \"center\",\r\n    fontFamily: \"var(font-family-content)\",\r\n  },\r\n  validacion: {\r\n    color: \"var(--error)\",\r\n    fontSize: 13,\r\n    margin: 5,\r\n  },\r\n  onClose: {\r\n    position: \"relative\",\r\n    left: \"98%\",\r\n    top: \"-9px\",\r\n    backgroundColor: \"var(primaryDark)\",\r\n    paddingTop: 0,\r\n    paddingRight: 0,\r\n    paddingBottom: 0,\r\n  },\r\n}));\r\n\r\nexport default FileReader;\r\n","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\Menu\\Menu.js",[],"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\helpers\\errors\\errors.js",[],"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\helpers\\architecture\\architecture.js",[],"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\helpers\\elements\\elements.js",[],"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\helpers\\projects\\projects.js",[],"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\EditMessage\\EditMessage.js",[],"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\api\\projects\\projects.js",[],"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\DeleteMessage\\DeleteMessage.js",[],"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\ModalMessage\\ModalMessage.js",[],"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\api\\elements\\elements.js",[],"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\SelectMessage\\SelectMessage.js",[],"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\api\\architecture\\architecture.js",[],"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\NavbarItem\\NavbarItem.js",[],"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\Excel\\ExcelDownloader.js",[],"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\helpers\\content\\downloader.js",[],"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\helpers\\versions\\versions.js",[],"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\TableItem\\Edges\\Edges.js",[],"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\TableItem\\Inputs\\Inputs.js",["195","196","197","198","199","200"],"import React, { useContext, useState } from \"react\";\r\nimport \"./inputs.css\";\r\n\r\nimport { makeStyles, useTheme } from \"@material-ui/core/styles\";\r\n\r\nimport { TextField } from \"@material-ui/core\";\r\n\r\nimport { Button } from \"@material-ui/core\";\r\n\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport AppContext from \"../../../auth/context/context\";\r\n\r\nimport nodeHelper from \"../../../helpers/nodes/nodes\";\r\n\r\nconst Inputs = () => {\r\n  // input validation\r\n  const {\r\n    register,\r\n    formState: { errors },\r\n    reset,\r\n    trigger,\r\n  } = useForm();\r\n\r\n  // Getting the values of each input fields\r\n  const [dms, setDms] = useState(0);\r\n  const [coupling, setCoupling] = useState(0);\r\n  const [nameResemblance, setNameResemblance] = useState(0);\r\n  const [packageMapping, setPackageMapping] = useState(0);\r\n  const [umbral, setUmbral] = useState(0);\r\n  const [sum, setSum] = useState(dms  + coupling + nameResemblance + packageMapping)\r\n\r\n  function calculateTotal() {\r\n    setSum(dms  + coupling + nameResemblance + packageMapping);\r\n\r\n  }\r\n\r\n\r\n   // Getting all the nodes and edges\r\n  const { selectedProject } = useContext(AppContext);\r\n\r\n  let nodesTest = selectedProject.elements.nodes.map((node) => {\r\n    return {\r\n      id: node.data.id,\r\n      name: node.data.name,\r\n      module: node.data.module,\r\n      incompleteResources: node.data.incompleteResources,\r\n    };\r\n  });\r\n\r\n\r\n  let edgesTest = nodeHelper.getRelationData(selectedProject);\r\n  \r\n  for(let i = 0; i<edgesTest.length; i++) {\r\n    let flag1 = false;\r\n    let flag2 = false;\r\n    let upper1 = 0;\r\n    let upper2 = 0;\r\n      for(let j = 0; j < nodesTest.length; j++){\r\n        if(nodesTest[j].id === edgesTest[i].source && nodesTest[j].incompleteResources === true){\r\n          flag1 = true;\r\n          edgesTest[i].q = \"NA\";\r\n          edgesTest[i].answer = \"NA\";\r\n        }\r\n        if(nodesTest[j].id === edgesTest[i].target){\r\n          flag2 = true;\r\n          edgesTest[i].q = \"NA\";\r\n          edgesTest[i].answer = \"NA\";\r\n        }\r\n        if(flag1 && flag2){\r\n          break;\r\n        }\r\n      }\r\n    upper1 = edgesTest[i].coupling*coupling + edgesTest[i].nameResemblance*nameResemblance + edgesTest[i].packageMapping*packageMapping;\r\n    upper2 = edgesTest[i].dms * dms;\r\n    let q = (upper1 - upper2) / sum;\r\n    edgesTest[i].q = q;\r\n\r\n    if( q >= umbral){\r\n      edgesTest[i].answer = 'SI';\r\n    }else{\r\n      edgesTest[i].answer = 'NO';\r\n    }\r\n  \r\n  }\r\n    console.log(`Relaciones:`, edgesTest)\r\n\r\n  return (\r\n    <>\r\n      <form  className=\"form-styles\">\r\n        <div className=\"input\">\r\n          <div className=\"input-align\">\r\n            <input\r\n              value={dms}\r\n              onChange={(e) => setDms(+e.target.value)}\r\n              className={errors.dms ? \"input-errors\" : \"input-styles\"}\r\n              placeholder=\"W DMS\"\r\n              name=\"dms\"\r\n            />\r\n            {errors.dms && (\r\n              <small className=\"validation-text\">{errors.dms.message}</small>\r\n            )}\r\n          </div>\r\n          <div className=\"input-align\">\r\n            <input\r\n              className={errors.coupling ? \"input-errors\" : \"input-styles\"}\r\n              placeholder=\"W Acoplamiento\"\r\n              name=\"acloplamiento\"\r\n              value={coupling}\r\n              onChange={(e) => setCoupling(+e.target.value)}\r\n            />\r\n            {errors.acoplamiento && (\r\n              <small className=\"validation-text\">\r\n                {errors.acoplamiento.message}\r\n              </small>\r\n            )}\r\n          </div>\r\n          <div className=\"input-align\">\r\n            <input\r\n              className={errors.semejanza ? \"input-errors\" : \"input-styles\"}\r\n              placeholder=\"W Sem. de Nombre\"\r\n              name=\"semejanza\"\r\n              value={nameResemblance}\r\n              onChange={(e) => setNameResemblance(+e.target.value)}\r\n            />\r\n            {errors.semejanza && (\r\n              <small className=\"validation-text\">\r\n                {errors.semejanza.message}\r\n              </small>\r\n            )}\r\n          </div>\r\n          <div className=\"input-align\">\r\n            <input\r\n              className={errors.paquete ? \"input-errors\" : \"input-styles\"}\r\n              placeholder=\"W Mapeo de Paquete\"\r\n              name=\"paquete\"\r\n              value={packageMapping}\r\n              onChange={(e) => setPackageMapping(+e.target.value)}\r\n            />\r\n            {errors.paquete && (\r\n              <small className=\"validation-text\">\r\n                {errors.paquete.message}\r\n              </small>\r\n            )}\r\n          </div>\r\n          <div className=\"input-align-umbral\">\r\n            <input\r\n              className={\r\n                errors.umbral ? \"input-errors-umbral\" : \"input-styles-umbral\"\r\n              }\r\n              placeholder=\"Umbral\"\r\n              name=\"umbral\"\r\n              value={umbral}\r\n              onChange={(e) => setUmbral(e.target.value)}\r\n            />\r\n            {errors.umbral && (\r\n              <small className=\"validation-text\">{errors.umbral.message}</small>\r\n            )}\r\n          </div>\r\n        </div>\r\n        <Button onClick={calculateTotal} variant=\"contained\">\r\n          Total\r\n        </Button>\r\n        <h1>{sum}</h1>\r\n      </form>\r\n    </>\r\n  );\r\n};\r\n\r\n/** Creacion de capa de estilos para el componente */\r\nconst useStyles = makeStyles((theme) => ({\r\n  inputs: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport default Inputs;\r\n","C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\components\\TableItem\\Nodes\\Nodes.js",[],"C:\\Users\\leonp\\Documents\\Tesis\\Repos tesis\\tesis-front-end-2.0\\src\\api\\login\\versions\\versions.js",[],{"ruleId":"201","replacedBy":"202"},{"ruleId":"203","replacedBy":"204"},{"ruleId":"205","severity":1,"message":"206","line":94,"column":6,"nodeType":"207","endLine":94,"endColumn":27,"suggestions":"208"},{"ruleId":"209","severity":1,"message":"210","line":72,"column":5,"nodeType":"211","messageId":"212","endLine":72,"endColumn":16},{"ruleId":"213","severity":1,"message":"214","line":23,"column":22,"nodeType":"215","messageId":"216","endLine":23,"endColumn":40},{"ruleId":"205","severity":1,"message":"217","line":165,"column":6,"nodeType":"207","endLine":165,"endColumn":10,"suggestions":"218"},{"ruleId":"205","severity":1,"message":"219","line":171,"column":6,"nodeType":"207","endLine":171,"endColumn":19,"suggestions":"220"},{"ruleId":"213","severity":1,"message":"221","line":13,"column":10,"nodeType":"215","messageId":"216","endLine":13,"endColumn":19},{"ruleId":"213","severity":1,"message":"222","line":4,"column":22,"nodeType":"215","messageId":"216","endLine":4,"endColumn":30},{"ruleId":"223","severity":1,"message":"224","line":267,"column":1,"nodeType":"225","endLine":275,"endColumn":3},{"ruleId":"205","severity":1,"message":"226","line":112,"column":6,"nodeType":"207","endLine":112,"endColumn":14,"suggestions":"227"},{"ruleId":"228","severity":1,"message":"229","line":166,"column":17,"nodeType":"230","messageId":"231","endLine":173,"endColumn":19},{"ruleId":"213","severity":1,"message":"222","line":4,"column":22,"nodeType":"215","messageId":"216","endLine":4,"endColumn":30},{"ruleId":"213","severity":1,"message":"221","line":6,"column":10,"nodeType":"215","messageId":"216","endLine":6,"endColumn":19},{"ruleId":"213","severity":1,"message":"232","line":19,"column":5,"nodeType":"215","messageId":"216","endLine":19,"endColumn":13},{"ruleId":"213","severity":1,"message":"233","line":21,"column":5,"nodeType":"215","messageId":"216","endLine":21,"endColumn":10},{"ruleId":"213","severity":1,"message":"234","line":22,"column":5,"nodeType":"215","messageId":"216","endLine":22,"endColumn":12},{"ruleId":"213","severity":1,"message":"235","line":171,"column":7,"nodeType":"215","messageId":"216","endLine":171,"endColumn":16},"no-native-reassign",["236"],"no-negated-in-lhs",["237"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'get'. Either include it or remove the dependency array.","ArrayExpression",["238"],"no-dupe-keys","Duplicate key 'marginRight'.","ObjectExpression","unexpected","no-unused-vars","'setSelectedProject' is assigned a value but never used.","Identifier","unusedVar","React Hook useEffect has missing dependencies: 'selectNodeHandler', 'setSelectedNodes', 'setSelectionModel', and 'unselectNodeHandler'. Either include them or remove the dependency array.",["239"],"React Hook useEffect has a missing dependency: 'setEdgesLabel'. Either include it or remove the dependency array.",["240"],"'TextField' is defined but never used.","'useTheme' is defined but never used.","import/no-anonymous-default-export","Assign object to a variable before exporting as module default","ExportDefaultDeclaration","React Hook React.useEffect has a missing dependency: 'onClose'. Either include it or remove the dependency array. If 'onClose' changes too often, find the parent component that defines it and wrap that definition in useCallback.",["241"],"react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","noDuplicateProps","'register' is assigned a value but never used.","'reset' is assigned a value but never used.","'trigger' is assigned a value but never used.","'useStyles' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"242","fix":"243"},{"desc":"244","fix":"245"},{"desc":"246","fix":"247"},{"desc":"248","fix":"249"},"Update the dependencies array to be: [user, reloadSidebar, get]",{"range":"250","text":"251"},"Update the dependencies array to be: [cy, selectNodeHandler, setSelectedNodes, setSelectionModel, unselectNodeHandler]",{"range":"252","text":"253"},"Update the dependencies array to be: [checked, cy, setEdgesLabel]",{"range":"254","text":"255"},"Update the dependencies array to be: [loader, onClose]",{"range":"256","text":"257"},[2301,2322],"[user, reloadSidebar, get]",[4234,4238],"[cy, selectNodeHandler, setSelectedNodes, setSelectionModel, unselectNodeHandler]",[4316,4329],"[checked, cy, setEdgesLabel]",[3289,3297],"[loader, onClose]"]