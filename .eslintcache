[{"C:\\Users\\Mari\\Desktop\\Tesis\\tesis-frontend\\src\\components\\Content\\Content.js":"1","C:\\Users\\Mari\\Desktop\\Tesis\\tesis-frontend\\src\\components\\Table\\Table.js":"2"},{"size":5083,"mtime":1620243983161,"results":"3","hashOfConfig":"4"},{"size":2695,"mtime":1620243961469,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":6,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"source":"8"},"1ry7ltc",{"filePath":"9","messages":"10","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\Mari\\Desktop\\Tesis\\tesis-frontend\\src\\components\\Content\\Content.js",["11","12","13","14","15","16"],"import React, { useContext, useState, useEffect } from \"react\";\r\nimport \"./Content.css\";\r\n\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport HighlightOffIcon from \"@material-ui/icons/HighlightOff\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\n\r\nimport Swal from \"sweetalert2\";\r\n\r\nimport AppContext from \"../../auth/context/context\";\r\nimport CytoscapeComponent from \"react-cytoscapejs\";\r\nimport Loader from \"../Loader/Loader\";\r\n\r\n/**\r\n * Componente que representa el contenido\r\n * de la arquitectura seleccionada\r\n */\r\nconst Content = () => {\r\n  const classes = useStyles();\r\n  const [elementos, setElementos] = useState();\r\n  const { selectedProject, setSelectedProject, setCy } = useContext(AppContext);\r\n  const [load, setLoad] = useState(false);\r\n  let cyto;\r\n\r\n  /** Creacion de capa de estilos para el grafo segun Cytoscape */\r\n  var state = {\r\n    layout: {\r\n      name: 'circle',\r\n      fit: true,\r\n      padding: 30,\r\n      avoidOverlap: true,\r\n      nodeDimensionsIncludeLabels: true,\r\n      avoidOverlapPadding: 150,\r\n    },\r\n    stylesheet: [\r\n      {\r\n        selector: \"node\",\r\n        style: {\r\n          content: \"data(id)\",\r\n          'text-valign': 'center',\r\n          width: 150,\r\n          color: 'white',\r\n          height: 100,\r\n          \"background-color\": \"#18202C\",\r\n        },\r\n      },\r\n      {\r\n        selector: \"edge\",\r\n        style: {\r\n          width: 3,\r\n          content: \"data(id)\",\r\n          \"curve-style\": \"bezier\",\r\n          \"target-arrow-shape\": \"triangle\",\r\n          \"line-color\": \"#ddd\",\r\n          \"target-arrow-color\": \"#18202C\",\r\n        },\r\n      },\r\n    ],\r\n  };\r\n\r\n  /**\r\n   * Cerrar proyecto seleccionado\r\n   */\r\n   const onClose = () => {\r\n    Swal.fire({\r\n      text: \"¿Seguro que deseas cerrar \" + selectedProject.versionName + \"?\",\r\n      icon: \"warning\",\r\n      showCancelButton: true,\r\n      confirmButtonColor: \"var(--success)\",\r\n      cancelButtonColor: \"var(--error)\",\r\n      confirmButtonText: \"Si, seguro\",\r\n      cancelButtonText: \"Cancelar\",\r\n    }).then((result) => {\r\n      if (result.isConfirmed) {\r\n        setSelectedProject();\r\n      }\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Crear referencia al elemento de Cytoscape,\r\n   * actuar el tamaño viewport del grafo,\r\n   * establecer funcionalidad sobre nodos y arcos\r\n   * @param {CytoscapeComponent} cy referencia al componente\r\n   */\r\n  const getCy = (cy) => {\r\n    cyto = cy;\r\n    //cyto.fit();\r\n    cyto.on(\"select\", \"node\", selectedNodeHandler);\r\n    cyto.on(\"unselect\", \"node\", unselectNodeHandler);\r\n    //cyto.style().selector(\"node\").style(\"background-color\", \"magenta\").update(); // indicate the end of your new stylesheet so that it can be updated on elements\r\n  }\r\n\r\n  /**\r\n   * Manejador de evento al seleccionar nodo\r\n   * @param {Event} event referencia al elemento\r\n   */\r\n  const selectedNodeHandler = (evt) => {\r\n    \r\n    const nodeId = evt['target']['_private']['data'].id;\r\n    nodesHelper.addNode(nodeId, selectedNodes, setSelectedNodes);\r\n    console.log(\"hola\")\r\n    cyto.animate({\r\n      fit: {\r\n        eles: cyto.getElementById(nodeId),\r\n        padding: 20\r\n      }\r\n    }, {\r\n      duration: 1000\r\n    });\r\n    evt.preventDefault();\r\n  };\r\n\r\n  /**\r\n   * Manejador de evento al dejar de seleccionar nodo\r\n   * @param {Event} event referencia al elemento\r\n   */\r\n  const unselectNodeHandler = (evt) => {\r\n    const nodeId = evt['target']['_private']['data'].id;\r\n    nodesHelper.removeNode(nodeId, selectedNodes, setSelectedNodes);\r\n    cyto.getElementById(nodeId).stop();\r\n    console.log(\"aa\")\r\n    cyto.getElementById(nodeId).animate(\r\n      {\r\n        style: {\r\n          \"background-color\": \"#18202C\",\r\n        },\r\n      },\r\n      {\r\n        duration: 100,\r\n      }\r\n    );\r\n    //console.log(\"select \", target);\r\n  };\r\n\r\n  useEffect(() => {\r\n    setLoad(true);\r\n    setElementos(selectedProject.elements);\r\n  }, [selectedProject]);\r\n\r\n  useEffect(() => {\r\n    if (load) {\r\n      setLoad(false);\r\n    }\r\n  }, [elementos, load]);\r\n\r\n  return (\r\n    <>\r\n      {load ? (\r\n        <Loader />\r\n      ) : elementos ? (\r\n        <div>\r\n          <IconButton\r\n            color=\"inherit\"\r\n            aria-label=\"open drawer\"\r\n            className={classes.onClose}\r\n            onClick={onClose}\r\n            edge=\"start\"\r\n          >\r\n            <HighlightOffIcon />\r\n          </IconButton>\r\n          <CytoscapeComponent\r\n            id=\"component\"\r\n            zoom={0.5}\r\n            maxZoom={2}\r\n            elements={CytoscapeComponent.normalizeElements(elementos)}\r\n            className=\"component\"\r\n            layout={state.layout}\r\n            stylesheet={state.stylesheet}\r\n            pan={{ x: 150, y: 30 }}\r\n            cy={(cy) => {\r\n              getCy(cy);\r\n              setCy(cy);\r\n            }}\r\n          />\r\n        </div>\r\n      ) : null}\r\n    </>\r\n  );\r\n};\r\n\r\n/** Creacion de capa de estilos para el componente */\r\nconst useStyles = makeStyles((theme) => ({\r\n  onClose: {\r\n    position: \"absolute\",\r\n    right: \"18px\",\r\n    top: \"70px\",\r\n    zIndex: 3,\r\n  },\r\n}));\r\n\r\nexport default Content;\r\n","C:\\Users\\Mari\\Desktop\\Tesis\\tesis-frontend\\src\\components\\Table\\Table.js",["17","18","19"],{"ruleId":"20","severity":2,"message":"21","line":101,"column":5,"nodeType":"22","messageId":"23","endLine":101,"endColumn":16},{"ruleId":"20","severity":2,"message":"24","line":101,"column":33,"nodeType":"22","messageId":"23","endLine":101,"endColumn":46},{"ruleId":"20","severity":2,"message":"25","line":101,"column":48,"nodeType":"22","messageId":"23","endLine":101,"endColumn":64},{"ruleId":"20","severity":2,"message":"21","line":120,"column":5,"nodeType":"22","messageId":"23","endLine":120,"endColumn":16},{"ruleId":"20","severity":2,"message":"24","line":120,"column":36,"nodeType":"22","messageId":"23","endLine":120,"endColumn":49},{"ruleId":"20","severity":2,"message":"25","line":120,"column":51,"nodeType":"22","messageId":"23","endLine":120,"endColumn":67},{"ruleId":"26","severity":1,"message":"27","line":19,"column":9,"nodeType":"22","messageId":"28","endLine":19,"endColumn":14},{"ruleId":"26","severity":1,"message":"29","line":63,"column":7,"nodeType":"22","messageId":"28","endLine":63,"endColumn":18},{"ruleId":"30","severity":1,"message":"31","line":73,"column":5,"nodeType":"32","messageId":"33","endLine":73,"endColumn":16},"no-undef","'nodesHelper' is not defined.","Identifier","undef","'selectedNodes' is not defined.","'setSelectedNodes' is not defined.","no-unused-vars","'theme' is assigned a value but never used.","unusedVar","'drawerWidth' is assigned a value but never used.","no-dupe-keys","Duplicate key 'marginRight'.","ObjectExpression","unexpected"]